// src/features/auth/components/LoginPort.jsx
import React, { useState, useCallback, useContext } from "react";
import axios from "axios";
import { Container } from "@mui/material";

import {
  Root,
  ContainerInner,
  Content,
  LeftCol,
  RightCol,
  LogoWrap,
  BrandTitle,
  BrandSub,
  BigHeading,
  SubText,
  FeatureList,
  FeatureItem,
  Bullet,
  GlassCard,
  FormTitle,
  StyledTextField,
  PrimaryButton,
} from "./LoginStyles";

import LogoImg from "../../../assets/Logos/logosss.svg";
import BgImg from "../../../assets/BackGrounds/purpleGlassBg.jpg";

// If you already have contexts (BackgroundContext etc) you can import and use them.
// import { BackgroundContext } from "../../../context/BackgroundContext";

const LoginPort = () => {
  // states (kept same names/ideas as earlier)
  const [userId, setUserId] = useState("");
  const [validId, setValidId] = useState(false);
  const [error, setError] = useState("");
  const [page, setPage] = useState("HOME"); // HOME | PASSWORD | UPDATE
  const [loading, setLoading] = useState(false);
  const [password, setPassword] = useState("");

  // helper: clear error
  const clearError = () => setError("");

  // validateId - keep your same regex logic (7 digits or external)
  const validateId = useCallback((id) => {
    if (!id) return false;
    const onlyDigitRegex = /^\d{7}$/;
    const externalUserRegex = /^(?:tcs|v|tcsv)\d{7}$/i; // example from earlier
    if (onlyDigitRegex.test(id) || externalUserRegex.test(id)) {
      return true;
    }
    return false;
  }, []);

  // checkUser (same idea as you already had) - using axios.post to your endpoint
  const checkUser = useCallback(async () => {
    clearError();

    if (!validateId(userId)) {
      setError("Invalid User ID");
      setValidId(false);
      return;
    }

    setLoading(true);
    try {
      // NOTE: keep same endpoint path you had
      const resp = await axios.post("/LS/auth/check-user", { userId });

      // if your backend returns data in resp.data
      const result = resp?.data;
      if (!result) {
        setError("Empty response from server");
        setValidId(false);
        return;
      }

      // respect the same conditional logic you used previously
      if (result.userStatus === "INVALID") {
        setError("User Id does not exist");
        setValidId(false);
      } else if (result.passwordLoginStatus === "INACTIVE") {
        setError("Password login disabled. Use SSO");
        setValidId(false);
      } else {
        setValidId(true);
        // update page based on updatePassword flag (keeps your flow)
        setPage(result.updatePassword ? "UPDATE" : "PASSWORD");
      }
    } catch (err) {
      // preserve debugging-friendly messages (you had console.error previously)
      console.error("checkUser error:", err);
      if (err?.response) {
        setError(err.response?.data?.message || `Server ${err.response.status}`);
      } else {
        setError("Network error - cannot reach server");
      }
      setValidId(false);
    } finally {
      setLoading(false);
    }
  }, [userId, validateId]);

  // handle password submit (keeps same idea)
  const handlePasswordSubmit = useCallback(
    async (evt) => {
      if (evt && evt.preventDefault) evt.preventDefault();
      clearError();
      if (!password) {
        setError("Please enter password");
        return;
      }
      setLoading(true);
      try {
        const resp = await axios.post("/LS/auth/login", { userId, password });
        const data = resp?.data;
        if (resp.status === 200 && (data?.success || data?.token)) {
          // Success - redirect to dashboard (adjust to your router)
          // e.g. navigate('/dashboard') if using react-router
          window.location.href = "/dashboard"; // replace with your navigation
        } else {
          setError(data?.message || "Invalid credentials");
        }
      } catch (err) {
        console.error("login error", err);
        if (err?.response) setError(err.response.data?.message || "Login failed");
        else setError("Network error");
      } finally {
        setLoading(false);
      }
    },
    [userId, password]
  );

  return (
    <Root bgUrl={BgImg}>
      <ContainerInner>
        <Content>
          <LeftCol>
            <LogoWrap>
              <img src={LogoImg} alt="FinCore" width={92} />
              <div>
                <BrandTitle>FinCore</BrandTitle>
                <BrandSub>Empowering Data</BrandSub>
              </div>
            </LogoWrap>

            <BigHeading>Welcome to FinCore Reporting Portal</BigHeading>

            <SubText>
              Seamlessly access and generate critical financial reports with FinCore â€” SBI's centralized platform
              for secure, high integrity financial data access. Designed for internal operations.
            </SubText>

            <FeatureList>
              <FeatureItem>
                <Bullet />
                <span>End-to-end 256-bit SSL encryption</span>
              </FeatureItem>

              <FeatureItem>
                <Bullet />
                <span>Role-based Multi-factor access control</span>
              </FeatureItem>

              <FeatureItem>
                <Bullet />
                <span>Real-time tracking and auditing</span>
              </FeatureItem>
            </FeatureList>
          </LeftCol>

          <RightCol>
            <GlassCard elevation={3}>
              <FormTitle>Sign In</FormTitle>

              {page === "HOME" && (
                <form
                  onSubmit={(e) => {
                    e.preventDefault();
                    checkUser();
                  }}
                >
                  <StyledTextField
                    fullWidth
                    label="User ID"
                    placeholder="Enter user id"
                    value={userId}
                    onChange={(e) => setUserId(e.target.value)}
                    margin="dense"
                    size="small"
                    error={!!error}
                    helperText={error || ""}
                  />

                  <PrimaryButton type="submit" variant="contained" disabled={loading}>
                    {loading ? "Checking..." : "Next"}
                  </PrimaryButton>
                </form>
              )}

              {page === "PASSWORD" && (
                <form onSubmit={handlePasswordSubmit}>
                  <StyledTextField
                    fullWidth
                    label="Password"
                    placeholder="Enter password"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    margin="dense"
                    size="small"
                    error={!!error}
                    helperText={error || ""}
                  />

                  <PrimaryButton type="submit" variant="contained" disabled={loading}>
                    {loading ? "Signing in..." : "Sign
