// src/features/auth/components/LoginPort.jsx
import React, { useState, useCallback } from "react";
import axios from "axios";
import Container from "@mui/material/Container";
import CircularProgress from "@mui/material/CircularProgress";
import IconButton from "@mui/material/IconButton";
import InputAdornment from "@mui/material/InputAdornment";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";

import {
  Root,
  Content,
  LeftCol,
  RightCol,
  LogoWrap,
  BigHeading,
  SubText,
  FeatureList,
  FeatureItem,
  Bullet,
  GlassCard,
  FormTitle,
  StyledTextField,
  PrimaryButton,
} from "./LoginStyles";

// assets - adjust paths if different in your repo
import LogoImg from "../../../assets/Logos/logosss.svg";
import BgImg from "../../../assets/BackGrounds/purpleGlassBg.jpg";

/**
 * LoginPort.jsx
 * - No inline styling
 * - Uses styled components from LoginStyles.js
 * - Keeps existing validation + checkUser flow (axios)
 */

export default function LoginPort() {
  const [userId, setUserId] = useState("");
  const [password, setPassword] = useState("");
  const [validId, setValidId] = useState(false);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState("HOME"); // HOME | PASSWORD | UPDATE
  const [showPassword, setShowPassword] = useState(false);

  const clearError = useCallback(() => setError(""), []);

  const validateId = (id) => {
    // allow 7 digits or prefixed external users like tcs\1234567
    const onlyDigitRegex = /^\d{7}$/;
    const externalUserRegex = /^(?:\w+\\\w+|\w+)\d{7}$/; // keep permissive: adjust if needed
    if (onlyDigitRegex.test(id) || externalUserRegex.test(id)) {
      console.log(`${id}-regex satisfied`);
      return true;
    }
    return false;
  };

  const handleSubmit = async (e) => {
    e?.preventDefault();
    clearError();

    if (!validateId(userId)) {
      setError("Invalid User ID");
      return;
    }

    setLoading(true);
    try {
      // example API - adjust base url or axios instance as per project
      const resp = await axios.post("/LS/auth/check-user", { userId });
      const result = resp?.data;

      if (!result) {
        setError("Invalid response from server");
        setValidId(false);
        setLoading(false);
        return;
      }

      // sample logic kept from your old code
      if (result.userStatus === "INVALID") {
        setError("User Id does not exist");
        setValidId(false);
      } else if (result.passwordLoginStatus === "INACTIVE") {
        setError("Password login is disabled. Use SSO.");
        setValidId(false);
      } else {
        setValidId(true);
        if (result.updatePassword === true) {
          setPage("PASSWORD"); // open password change flow
        } else {
          // proceed to password entry on same UI
          setPage("PASSWORD");
        }
      }
    } catch (err) {
      console.error(err);
      setError("Login Error. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordSubmit = (e) => {
    e?.preventDefault();
    clearError();
    // Implement password check + login flow here (call your auth API)
    // For now simulate simple validation
    if (!password) {
      setError("Enter password");
      return;
    }
    // TODO: call login API, on success navigate to dashboard
    // axios.post('/LS/auth/login', { userId, password })...
    console.log("Logging in", userId);
  };

  return (
    <Root bgurl={BgImg}>
      <Container maxWidth="lg">
        <Content>
          <LeftCol>
            <LogoWrap>
              <img src={LogoImg} alt="FinCore" />
              <div>
                <div className="title">FinCore</div>
                <div className="subtitle">Empowering Data</div>
              </div>
            </LogoWrap>

            <BigHeading variant="h1">Welcome to FinCore Reporting Portal</BigHeading>

            <SubText>
              Seamlessly access and generate critical financial reports with FinCore â€” SBI's centralized
              technology platform for secure, high integrity financial data access. Designed for internal
              operations.
            </SubText>

            <FeatureList>
              <FeatureItem>
                <Bullet />
                <span>End-to-end 256-bit SSL encryption</span>
              </FeatureItem>

              <FeatureItem>
                <Bullet />
                <span>Role-based Multi-factor access control</span>
              </FeatureItem>

              <FeatureItem>
                <Bullet />
                <span>Real-time tracking and auditing</span>
              </FeatureItem>
            </FeatureList>
          </LeftCol>

          <RightCol>
            <GlassCard elevation={3}>
              {page === "HOME" && (
                <>
                  <FormTitle variant="h6">Sign In</FormTitle>
                  <form onSubmit={handleSubmit} noValidate>
                    <StyledTextField
                      fullWidth
                      label="User ID"
                      placeholder="Enter user id"
                      margin="dense"
                      value={userId}
                      onChange={(e) => {
                        setUserId(e.target.value);
                        clearError();
                      }}
                      error={Boolean(error)}
                      helperText={error}
                      inputProps={{ maxLength: 20 }}
                    />

                    <PrimaryButton
                      type="submit"
                      variant="contained"
                      disabled={loading || !userId}
                    >
                      {loading ? <CircularProgress size={20} color="inherit" /> : "Check"}
                    </PrimaryButton>
                  </form>
                </>
              )}

              {page === "PASSWORD" && (
                <>
                  <FormTitle variant="h6">Enter Password</FormTitle>
                  <form onSubmit={handlePasswordSubmit} noValidate>
                    <StyledTextField
                      fullWidth
                      label="Password"
                      placeholder="Enter password"
                      margin="dense"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => {
                        setPassword(e.target.value);
                        clearError();
                      }}
                      error={Boolean(error)}
                      helperText={error}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <IconButton
                              aria-label="toggle password visibility"
                              onClick={() => setShowPassword((s) => !s)}
                              edge="end"
                              size="small"
                            >
                              {showPassword ? <VisibilityOff fontSize="small" /> : <Visibility fontSize="small" />}
                            </IconButton>
                          </InputAdornment>
                        ),
                      }}
                    />

                    <PrimaryButton type="submit" variant="contained" disabled={loading}>
                      {loading ? <CircularProgress size={20} color="inherit" /> : "SIGN IN"}
                    </PrimaryButton>
                  </form>
                </>
              )}

              {page === "UPDATE" && (
                <>
                  <FormTitle variant="h6">Update Password</FormTitle>
                  {/* Place UpdatePassword component or fields here */}
                  <SubText>Update password flow (implement as per existing UpdatePassword.jsx)</SubText>
                </>
              )}
            </GlassCard>
          </RightCol>
        </Content>
      </Container>
    </Root>
  );
}
