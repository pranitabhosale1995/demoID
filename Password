// src/features/auth/components/LoginWithPassword.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Box, InputAdornment, IconButton } from "@mui/material";
import LockIcon from "@mui/icons-material/Lock";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import { v4 as uuidv4 } from "uuid";

import { parseJwt } from "../../../utils/EncryptionUtilities";
import { loginDialogMessages, loginDialogHeaders } from "../constants";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { setMenus, setSelectedMenuItem } from "../../../app/slices/menuSlice";
import { setTabId } from "../../../app/slices/tabsSlice";
import { setToken, setUser } from "../../../app/slices/authSlice";

import {
  StyledTextField,
  PrimaryButton,
  FormTitle,
  PasswordErrorText,
} from "./LoginStyles";

const LoginWithPassword = ({ userId, openLoginErrorDialog, onBackToHome }) => {
  const [password, setPassword] = useState("");
  const [passwordInvalidMessage, setPasswordInvalidMessage] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const menus = useSelector((state) => state.menus.menus);

  useEffect(() => {
    if (menus?.[0]?.route) {
      navigate(menus[0].route);
    }
  }, [menus, navigate]);

  const validateUserCredentials = async () => {
    setPasswordInvalidMessage("");
    try {
      const response = await axios.post("/LS/auth/login", {
        userId,
        password,
      });

      if (!response) {
        openLoginErrorDialog(
          "Login Failed",
          "Failed to log into FinCore, please try again later"
        );
        return;
      }

      const result = response.data || {};

      // === Successful login ===
      if (result.validCredentials === true) {
        const user = parseJwt(result.accessToken);
        const tabId = uuidv4();

        dispatch(setTabId(tabId));
        dispatch(setToken(result.accessToken));
        dispatch(setUser(user));

        dispatch(setMenus(result.roleData?.root_menus || []));
        dispatch(setSelectedMenuItem(result.roleData?.root_menus?.[0] || null));

        try {
          const bc = new BroadcastChannel("auth");
          setTimeout(() => {
            bc.postMessage({
              type: "USER_LOGGED_IN",
              tabId,
              userId: user.userId,
            });
          }, 1000);
        } catch {
          /* ignore BroadcastChannel errors */
        }

        return;
      }

      // === Invalid password / account locked ===
      if (result.userStatus === "ACTIVE" && result.loginMethod === "p") {
        if (result.attemptsLeft > 0) {
          setPasswordInvalidMessage(
            `Invalid password. You have ${result.attemptsLeft} attempts left.`
          );
        } else {
          openLoginErrorDialog(
            "Account Locked",
            "You are out of attempts and your account has been locked."
          );
        }
      } else {
        openLoginErrorDialog(
          loginDialogHeaders[result.userStatus] || "Login Error",
          loginDialogMessages[result.userStatus] || "Something went wrong"
        );
      }
    } catch (e) {
      console.error("Error in login ::: ", e);
      openLoginErrorDialog(
        "Login Failed",
        "Failed to log into FinCore, please try again later"
      );
    }
  };

  const toggleShowPassword = () => {
    setShowPassword((s) => !s);
  };

  return (
    <Box>
      <FormTitle>Enter Password</FormTitle>

      <StyledTextField
        fullWidth
        label="Password"
        type={showPassword ? "text" : "password"}
        placeholder="Enter your password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        variant="outlined"
        error={passwordInvalidMessage !== ""}
        margin="normal"
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <LockIcon />
            </InputAdornment>
          ),
          endAdornment: (
            <InputAdornment position="end">
              <IconButton
                aria-label={showPassword ? "Hide password" : "Show password"}
                onClick={toggleShowPassword}
                edge="end"
                size="large"
              >
                {showPassword ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          ),
        }}
      />

      {passwordInvalidMessage && (
        <PasswordErrorText>{passwordInvalidMessage}</PasswordErrorText>
      )}

      <PrimaryButton
        fullWidth
        variant="contained"
        onClick={validateUserCredentials}
        disabled={!userId}
      >
        Sign In
      </PrimaryButton>
    </Box>
  );
};

export default LoginWithPassword;
