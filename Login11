// src/features/auth/components/LoginPort.jsx
import React, { useState, useContext } from "react";
import axios from "axios";
import { Container, Box } from "@mui/material";
import Person from "@mui/icons-material/Person";

// Import your reusable styled components
import {
  Root,
  Content,
  LeftCol,
  RightCol,
  LogoWrap,
  BigHeading,
  SubText,
  FeatureList,
  FeatureItem,
  Bullet,
  GlassCard,
  FormTitle,
  StyledTextField,
  PrimaryButton,
} from "./LoginStyles";

// Import additional components
import LoginWithPassword from "./LoginWithPassword";
import UpdatePassword from "./UpdatePassword";
import LoginErrorDialog from "./LoginErrorDialog";

// Import assets
import LogoImg from "../../../assets/Logos/logosss.svg";
import BgImg from "../../../assets/BackGrounds/purpleGlassBg.jpg";

// Optional: If BackgroundContext used in app
// import { BackgroundContext } from "../../../context/BackgroundContext";

export default function LoginPort() {
  // 🔹 State variables (same as your original)
  const [userId, setUserId] = useState("");
  const [validId, setValidId] = useState(false);
  const [error, setError] = useState("");
  const [page, setPage] = useState("HOME");
  const [dialogHeading, setDialogHeading] = useState("");
  const [dialogContent, setDialogContent] = useState("");
  const [showErrorDialog, setShowErrorDialog] = useState(false);
  const [loading, setLoading] = useState(false);

  // 🔹 Open error dialog (same logic)
  const openLoginErrorDialog = (heading, content) => {
    setDialogHeading(heading);
    setDialogContent(content);
    setShowErrorDialog(true);
  };

  // 🔹 Validate ID (same regex logic as your original)
  const validateId = (id) => {
    if (!id) return false;
    const onlyDigitRegex = /^\d{7}$/;
    const externalUserRegex = /^(?:tcs|v|tcsv)\d{7}$/i;
    if (onlyDigitRegex.test(id) || externalUserRegex.test(id)) {
      return true;
    }
    return false;
  };

  // 🔹 Check User API logic (same as your code but cleaner)
  const checkUser = async () => {
    setError("");

    if (!validateId(userId)) {
      setError("Invalid User ID");
      return;
    }

    try {
      setLoading(true);

      const resp = await axios.post("/LS/auth/check-user", { userId });
      const result = resp?.data || {};
      console.log("✅ check-user response:", result);

      // Invalid or missing
      if (!result.userStatus || result.userStatus === "INVALID") {
        setError("User Id does not exist");
        setValidId(false);
        return;
      }

      // Password inactive
      if (result.passwordLoginStatus === "INACTIVE") {
        openLoginErrorDialog(
          "Password Locked!",
          "You cannot login using password currently. Please try with SSO."
        );
        return;
      }

      // Force password update
      if (result.updatePassword === true) {
        setValidId(true);
        setPage("UPDATE");
        return;
      }

      // Active user
      if (result.userStatus === "ACTIVE" && result.passwordLoginStatus === "ACTIVE") {
        setValidId(true);
        setPage("PASSWORD");
        return;
      }

      // Fallback
      openLoginErrorDialog(
        "Login Not Allowed",
        result.message || "Please contact the administrator."
      );
    } catch (err) {
      console.error("❌ checkUser error:", err);
      openLoginErrorDialog("Login Error", "Something went wrong, please try again later");
    } finally {
      setLoading(false);
    }
  };

  // 🔹 Submit handler
  const handleSubmit = (e) => {
    e.preventDefault();
    if (page === "HOME") checkUser();
  };

  // 🔹 Return UI (purple theme layout)
  return (
    <Root bgurl={BgImg}>
      <Container maxWidth="lg">
        <Content>
          {/* LEFT SIDE */}
          <LeftCol>
            <LogoWrap>
              <img src={LogoImg} alt="FinCore" style={{ width: 90, height: "auto" }} />
              <div>
                <div style={{ fontWeight: 700, fontSize: 20 }}>FinCore</div>
                <div style={{ fontSize: 13, color: "rgba(0,0,0,0.6)" }}>Empowering Data</div>
              </div>
            </LogoWrap>

            <BigHeading variant="h1">Welcome to FinCore Reporting Portal</BigHeading>
            <SubText>
              Seamlessly access and generate critical financial reports with FinCore — SBI's
              centralized platform for secure, high integrity financial data access.
              Designed for internal operations.
            </SubText>

            <FeatureList>
              <FeatureItem>
                <Bullet /> End-to-end 256-bit SSL encryption
              </FeatureItem>
              <FeatureItem>
                <Bullet /> Role-based Multi-factor access control
              </FeatureItem>
              <FeatureItem>
                <Bullet /> Real-time tracking and auditing
              </FeatureItem>
            </FeatureList>
          </LeftCol>

          {/* RIGHT SIDE */}
          <RightCol>
            <GlassCard elevation={3}>
              <FormTitle variant="h6">Sign In</FormTitle>

              <form onSubmit={handleSubmit} noValidate>
                <StyledTextField
                  fullWidth
                  label="User ID"
                  placeholder="Enter your User ID"
                  margin="dense"
                  value={userId}
                  onChange={(e) => setUserId(e.target.value)}
                  error={Boolean(error)}
                  helperText={error || ""}
                  InputProps={{
                    startAdornment: <Person sx={{ mr: 1, opacity: 0.6 }} />,
                  }}
                />

                {/* HOME (First screen) */}
                {page === "HOME" && (
                  <Box sx={{ mt: 2 }}>
                    <PrimaryButton
                      type="submit"
                      variant="contained"
                      disabled={loading}
                    >
                      {loading ? "Checking..." : "SIGN IN"}
                    </PrimaryButton>
                  </Box>
                )}

                {/* PASSWORD (Render password form) */}
                {page === "PASSWORD" && (
                  <Box sx={{ mt: 2 }}>
                    <LoginWithPassword
                      userId={userId}
                      openLoginErrorDialog={openLoginErrorDialog}
                    />
                  </Box>
                )}

                {/* UPDATE PASSWORD */}
                {page === "UPDATE" && (
                  <Box sx={{ mt: 2 }}>
                    <UpdatePassword
                      userId={userId}
                      openLoginErrorDialog={openLoginErrorDialog}
                    />
                  </Box>
                )}
              </form>
            </GlassCard>
          </RightCol>
        </Content>
      </Container>

      {/* ERROR DIALOG */}
      <LoginErrorDialog
        open={showErrorDialog}
        title={dialogHeading || "Login Error"}
        content={dialogContent || "Something went wrong!"}
        onClose={() => {
          setShowErrorDialog(false);
          setDialogHeading("");
          setDialogContent("");
        }}
      />
    </Root>
  );
}
