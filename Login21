// src/features/auth/components/LoginPort.jsx
import React, { useState, useMemo } from "react";
import axios from "axios";
import { Box, Container, Typography, InputAdornment } from "@mui/material";
import Person from "@mui/icons-material/Person";

// adjust these imports/paths to your project
import LogoImg from "../../../assets/Logos/fincore_transparent.svg";
import LoginErrorDialog from "./LoginErrorDialog";
import LoginWithPassword from "./LoginWithPassword";
import UpdatePassword from "./UpdatePassword";

import {
  Root,
  Content,
  LeftCol,
  RightCol,
  LogoWrap,
  GlassCard,
  StyledTextField,
  PrimaryButton,
  BigHeading,
  SubText,
  FeatureList,
  FeatureItem,
  Bullet,
} from "./LoginStyles";

export default function LoginPort() {
  // === STATES ===
  const [userId, setUserId] = useState("");
  const [validId, setValidId] = useState(false);
  const [error, setError] = useState("");
  const [page, setPage] = useState("HOME"); // HOME | PASSWORD | UPDATE
  const [dialogHeading, setDialogHeading] = useState("");
  const [dialogContent, setDialogContent] = useState("");
  const [showErrorDialog, setShowErrorDialog] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userIdDisabled, setUserIdDisabled] = useState(false);

  // Compute current allowed max length based on prefix
  const computeMaxLen = (val) => {
    const v = (val || "").toLowerCase();
    if (v.startsWith("tcsv")) return 4 + 7; // 11
    if (v.startsWith("tcs")) return 3 + 7; // 10
    if (v.startsWith("v")) return 1 + 7; // 8
    // default numeric-only user id -> 7
    return 7;
  };

  // keep current maxLength in a memo (recomputed each render from current userId)
  const currentMaxLength = useMemo(() => computeMaxLen(userId), [userId]);

  // === DIALOG HANDLERS ===
  const handleDialogClose = () => {
    setShowErrorDialog(false);
    setDialogHeading("");
    setDialogContent("");
  };

  const openLoginErrorDialog = (heading, content) => {
    setDialogHeading(heading);
    setDialogContent(content);
    setShowErrorDialog(true);
  };

  // === VALIDATION ===
  // Matches exactly:
  //  - 7 digits: 1234567
  //  - v + 7 digits: v1234567
  //  - tcs + 7 digits: tcs1234567
  //  - tcsv + 7 digits: tcsv1234567
  const validateId = (id) => {
    if (!id) return false;
    const v = id.trim().toLowerCase();
    const regex = /^(?:\d{7}|v\d{7}|tcs\d{7}|tcsv\d{7})$/;
    return regex.test(v);
  };

  // === Input handler that prevents typing beyond allowed length and sanitizes pasted content ===
  const handleUserIdChange = (raw) => {
    if (userIdDisabled) return; // if disabled, don't allow change

    // sanitize: remove whitespace
    let val = (raw || "").replace(/\s+/g, "");

    // lower-case for prefix detection but keep original-case for user display if you prefer.
    // We'll preserve user's typed case, but detection uses lower-case.
    const low = val.toLowerCase();

    // decide allowed max length based on prefix detection on the current value
    let maxLen = 7;
    if (low.startsWith("tcsv")) maxLen = 11; // "tcsv" + 7
    else if (low.startsWith("tcs")) maxLen = 10; // "tcs" + 7
    else if (low.startsWith("v")) maxLen = 8; // "v" + 7
    else maxLen = 7; // numeric-only

    // If pasted/typed value longer than allowed, trim it
    if (val.length > maxLen) {
      val = val.slice(0, maxLen);
    }

    // Optionally: enforce that after prefix the remaining chars are digits.
    // We'll sanitize by extracting prefix (letters) and digits part and drop any non-digits in digit part.
    let prefix = "";
    let digitsPart = val;

    const lowerVal = val.toLowerCase();
    if (lowerVal.startsWith("tcsv")) {
      prefix = val.slice(0, 4);
      digitsPart = val.slice(4);
    } else if (lowerVal.startsWith("tcs")) {
      prefix = val.slice(0, 3);
      digitsPart = val.slice(3);
    } else if (lowerVal.startsWith("v")) {
      prefix = val.slice(0, 1);
      digitsPart = val.slice(1);
    } else {
      // no prefix
      prefix = "";
      digitsPart = val;
    }

    // keep only digits in digitsPart
    digitsPart = digitsPart.replace(/\D/g, "");
    // enforce digits length to at most 7
    if (digitsPart.length > 7) digitsPart = digitsPart.slice(0, 7);

    // rebuild value
    const newVal = prefix + digitsPart;

    setUserId(newVal);

    // clear error while typing
    if (error) setError("");
  };

  // handle paste event on input (prevent spaces and enforce limits)
  const handleUserIdPaste = (e) => {
    e.preventDefault();
    const paste = (e.clipboardData || window.clipboardData).getData("text");
    handleUserIdChange(paste);
  };

  // === API CALL: CHECK USER ===
  const checkUser = async () => {
    setError("");
    if (!validateId(userId)) {
      setError("Invalid User ID");
      return;
    }

    try {
      setLoading(true);
      // send normalized userId (trim + lower) to backend if you want
      const payloadUserId = userId.trim();
      const resp = await axios.post("/LS/auth/check-user", { userId: payloadUserId });
      const result = resp?.data || {};

      console.log("✅ check-user response:", result);

      // user does not exist
      if (!result.userStatus || result.userStatus === "INVALID") {
        setError("User Id does not exist");
        setValidId(false);
        return;
      }

      // password login locked/inactive
      if (result.passwordLoginStatus === "INACTIVE") {
        openLoginErrorDialog(
          "Password Locked!",
          "You cannot login using password currently. Please try with SSO."
        );
        return;
      }

      // require update password
      if (result.updatePassword === true) {
        setValidId(true);
        setPage("UPDATE");
        setUserIdDisabled(true); // disable editing once password/update step appears
        return;
      }

      // normal active -> go to password page
      if (result.userStatus === "ACTIVE" && result.passwordLoginStatus === "ACTIVE") {
        setValidId(true);
        setPage("PASSWORD");
        setUserIdDisabled(true); // disable editing
        return;
      }

      // otherwise show generic not allowed
      openLoginErrorDialog(
        "Login Not Allowed",
        result.message || "Please contact the administrator."
      );
    } catch (err) {
      console.error("❌ checkUser error:", err);
      openLoginErrorDialog("Login Error", "Something went wrong, please try again later.");
    } finally {
      setLoading(false);
    }
  };

  // === FORM SUBMIT ===
  const handleSubmit = (e) => {
    e.preventDefault();
    if (page === "HOME") checkUser();
  };

  // callback to be given to UpdatePassword to handle success
  const handlePasswordUpdateSuccess = () => {
    // after updating password, go back to password login screen
    setPage("PASSWORD");
    setUserIdDisabled(true); // keep disabled while entering password
  };

  const enableEditingBackToHome = () => {
    setPage("HOME");
    setUserIdDisabled(false);
    setValidId(false);
    setError("");
    setUserId("");
  };

  // === RENDER ===
  return (
    <Root>
      <Container maxWidth="lg">
        <Content>
          {/* LEFT SIDE */}
          <LeftCol>
            <LogoWrap>
              <img src={LogoImg} alt="FinCore" style={{ width: 90, height: "auto" }} />
              <div>
                <div style={{ fontWeight: 700, fontSize: 20 }}>FinCore</div>
                <div style={{ fontSize: 13, color: "rgba(0,0,0,0.6)" }}>Empowering Data</div>
              </div>
            </LogoWrap>

            <BigHeading variant="h1">Welcome to FinCore Reporting Portal</BigHeading>

            <SubText>
              Seamlessly access and generate critical financial reports with FinCore-SBI's
              centralized platform for secure, high integrity financial data access. Designed for
              internal operations.
            </SubText>

            <FeatureList>
              <FeatureItem>
                <Bullet /> End-to-end 256-bit SSL encryption
              </FeatureItem>
              <FeatureItem>
                <Bullet /> Role-based Multi-factor access control
              </FeatureItem>
              <FeatureItem>
                <Bullet /> Real-time tracking and auditing
              </FeatureItem>
            </FeatureList>
          </LeftCol>

          {/* RIGHT SIDE */}
          <RightCol>
            <GlassCard elevation={3}>
              <Typography variant="h6" component="div" sx={{ mb: 2 }}>
                Sign In
              </Typography>

              <form onSubmit={handleSubmit} noValidate>
                <StyledTextField
                  fullWidth
                  label="User ID"
                  placeholder="Enter your User ID"
                  margin="dense"
                  value={userId}
                  onChange={(e) => handleUserIdChange(e.target.value)}
                  onPaste={handleUserIdPaste}
                  error={Boolean(error)}
                  helperText={error || " "}
                  disabled={userIdDisabled}
                  inputProps={{
                    maxLength: currentMaxLength, // helps prevent further typing in many browsers
                  }}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Person sx={{ mr: 1, opacity: 0.6 }} />
                      </InputAdornment>
                    ),
                  }}
                />

                {/* HOME PAGE */}
                {page === "HOME" && (
                  <Box sx={{ mt: 2 }}>
                    <PrimaryButton type="submit" variant="contained" disabled={loading}>
                      {loading ? "Checking..." : "SIGN IN"}
                    </PrimaryButton>
                  </Box>
                )}

                {/* PASSWORD PAGE */}
                {page === "PASSWORD" && (
                  <Box sx={{ mt: 2 }}>
                    <LoginWithPassword
                      userId={userId}
                      openLoginErrorDialog={openLoginErrorDialog}
                      onBackToHome={enableEditingBackToHome}
                    />
                  </Box>
                )}

                {/* UPDATE PASSWORD PAGE */}
                {page === "UPDATE" && (
                  <Box sx={{ mt: 2 }}>
                    <UpdatePassword
                      userId={userId}
                      openLoginErrorDialog={openLoginErrorDialog}
                      onUpdateSuccess={handlePasswordUpdateSuccess}
                    />
                  </Box>
                )}
              </form>
            </GlassCard>
          </RightCol>
        </Content>
      </Container>

      <LoginErrorDialog
        showErrorDialog={showErrorDialog}
        title={dialogHeading}
        content={dialogContent}
        onDialogClose={handleDialogClose}
      />
    </Root>
  );
}
