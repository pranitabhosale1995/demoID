// src/features/auth/components/LoginPort.jsx
import React, { useState } from "react";
import axios from "axios";
import { Box, Container, Typography, InputAdornment } from "@mui/material";
import Person from "@mui/icons-material/Person";

import LogoImg from "../../../assets/Logos/fincore_transparent.svg";
import LoginErrorDialog from "./LoginErrorDialog";
import LoginWithPassword from "./LoginWithPassword";
import UpdatePassword from "./UpdatePassword";

import {
  Root,
  Content,
  LeftCol,
  RightCol,
  LogoWrap,
  LogoImage,
  LogoTextContainer,
  LogoTitle,
  LogoSubtitle,
  GlassCard,
  StyledTextField,
  PrimaryButton,
  TitleText,
  DescriptionText,
  FeatureList,
  FeatureItem,
  FeatureBullet,
  FormTitle,
  FormContainer,
} from "./LoginStyles";

export default function LoginPort() {
  const [userId, setUserId] = useState("");
  const [error, setError] = useState("");
  const [page, setPage] = useState("HOME"); // HOME | PASSWORD | UPDATE
  const [dialogHeading, setDialogHeading] = useState("");
  const [dialogContent, setDialogContent] = useState("");
  const [showErrorDialog, setShowErrorDialog] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userIdDisabled, setUserIdDisabled] = useState(false);

  // === Dialog ===
  const handleDialogClose = () => {
    setShowErrorDialog(false);
    setDialogHeading("");
    setDialogContent("");
  };

  const openLoginErrorDialog = (heading, content) => {
    setDialogHeading(heading);
    setDialogContent(content);
    setShowErrorDialog(true);
  };

  // === Validation ===
  const validateId = (id) => {
    if (!id) return false;
    const v = id.trim().toLowerCase();
    const regex = /^(?:\d{7}|v\d{7}|tcs\d{7}|tcsv\d{7})$/;
    return regex.test(v);
  };

  // === Input restrictions ===
  const handleUserIdChange = (raw) => {
    if (userIdDisabled) return;

    let val = (raw || "").replace(/\s+/g, "");
    const m = val.match(/^([A-Za-z]*)(.*)$/);
    let prefixCandidate = (m && m[1]) || "";
    let rest = (m && m[2]) || "";

    const prefixLow = prefixCandidate.toLowerCase();
    const allowedPrefixList = ["", "t", "tc", "tcs", "tcsv", "v"];
    if (!allowedPrefixList.some((p) => prefixLow.startsWith(p))) {
      prefixCandidate = "";
    }

    const prefix = prefixCandidate;
    let digitsPart = rest.replace(/\D/g, "");
    if (digitsPart.length > 7) digitsPart = digitsPart.slice(0, 7);

    const newVal = prefix + digitsPart;
    setUserId(newVal);
    if (error) setError("");
  };

  const handleUserIdPaste = (e) => {
    e.preventDefault();
    const paste = (e.clipboardData || window.clipboardData).getData("text");
    handleUserIdChange(paste);
  };

  // === API call ===
  const checkUser = async () => {
    setError("");
    if (!validateId(userId)) {
      setError("Invalid User ID");
      return;
    }

    try {
      setLoading(true);
      const payloadUserId = userId.trim();
      const resp = await axios.post("/LS/auth/check-user", { userId: payloadUserId });
      const result = resp?.data || {};

      if (!result.userStatus || result.userStatus === "INVALID") {
        setError("User Id does not exist");
        return;
      }

      if (result.passwordLoginStatus === "INACTIVE") {
        openLoginErrorDialog(
          "Password Locked!",
          "You cannot login using password currently. Please try with SSO."
        );
        return;
      }

      if (result.updatePassword === true) {
        setPage("UPDATE");
        setUserIdDisabled(true);
        return;
      }

      if (result.userStatus === "ACTIVE" && result.passwordLoginStatus === "ACTIVE") {
        setPage("PASSWORD");
        setUserIdDisabled(true);
        return;
      }

      openLoginErrorDialog(
        "Login Not Allowed",
        result.message || "Please contact the administrator."
      );
    } catch (err) {
      console.error("❌ checkUser error:", err);
      openLoginErrorDialog("Login Error", "Something went wrong, please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (page === "HOME") checkUser();
  };

  const handlePasswordUpdateSuccess = () => {
    setPage("PASSWORD");
    setUserIdDisabled(true);
  };

  const enableEditingBackToHome = () => {
    setPage("HOME");
    setUserIdDisabled(false);
    setError("");
    setUserId("");
  };

  // === Render ===
  return (
    <Root>
      <Container maxWidth="lg">
        <Content>
          {/* LEFT SIDE */}
          <LeftCol>
            <LogoWrap>
              <LogoImage src={LogoImg} alt="FinCore" />
              <LogoTextContainer>
                <LogoTitle>FinCore</LogoTitle>
                <LogoSubtitle>Empowering Data</LogoSubtitle>
              </LogoTextContainer>
            </LogoWrap>

            <TitleText>Welcome to FinCore Reporting Portal</TitleText>
            <DescriptionText>
              Seamlessly access and generate critical financial reports with FinCore-SBI's
              centralized platform for secure, high integrity financial data access.
            </DescriptionText>

            <FeatureList>
              <FeatureItem>
                <FeatureBullet /> End-to-end 256-bit SSL encryption
              </FeatureItem>
              <FeatureItem>
                <FeatureBullet /> Role-based Multi-factor access control
              </FeatureItem>
              <FeatureItem>
                <FeatureBullet /> Real-time tracking and auditing
              </FeatureItem>
            </FeatureList>
          </LeftCol>

          {/* RIGHT SIDE */}
          <RightCol>
            <GlassCard elevation={3}>
              <FormContainer>
                <FormTitle variant="h6">Sign In</FormTitle>

                <form onSubmit={handleSubmit} noValidate>
                  <StyledTextField
                    fullWidth
                    label="User ID"
                    placeholder="Enter your User ID"
                    margin="dense"
                    value={userId}
                    onChange={(e) => handleUserIdChange(e.target.value)}
                    onPaste={handleUserIdPaste}
                    error={Boolean(error)}
                    helperText={error || " "}
                    disabled={userIdDisabled}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <Person />
                        </InputAdornment>
                      ),
                    }}
                  />

                  {page === "HOME" && (
                    <PrimaryButton type="submit" variant="contained" disabled={loading}>
                      {loading ? "Checking..." : "SIGN IN"}
                    </PrimaryButton>
                  )}

                  {page === "PASSWORD" && (
                    <Box>
                      <LoginWithPassword
                        userId={userId}
                        openLoginErrorDialog={openLoginErrorDialog}
                        onBackToHome={enableEditingBackToHome}
                      />
                    </Box>
                  )}

                  {page === "UPDATE" && (
                    <Box>
                      <UpdatePassword
                        userId={userId}
                        openLoginErrorDialog={openLoginErrorDialog}
                        onUpdateSuccess={handlePasswordUpdateSuccess}
                      />
                    </Box>
                  )}
                </form>
              </FormContainer>
            </GlassCard>
          </RightCol>
        </Content>
      </Container>

      <LoginErrorDialog
        showErrorDialog={showErrorDialog}
        title={dialogHeading}
        content={dialogContent}
        onDialogClose={handleDialogClose}
      />
    </Root>
  );
}
