// src/features/auth/components/LoginWithPassword.jsx
import React, { useState } from "react";
import axios from "axios";
import { Box, InputAdornment, IconButton } from "@mui/material";
import LockIcon from "@mui/icons-material/Lock";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import { v4 as uuidv4 } from "uuid";

import { parseJwt } from "../../../utils/EncryptionUtilities";
import { loginDialogMessages, loginDialogHeaders } from "../constants";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { setMenus, setSelectedMenuItem } from "../../../app/slices/menuSlice";
import { setTabId } from "../../../app/slices/tabsSlice";
import { setToken, setUser } from "../../../app/slices/authSlice";

import {
  StyledTextField,
  PrimaryButton,
  FormTitle,
  PasswordErrorText,
} from "./LoginStyles";

/**
 * LoginWithPassword
 * Props:
 *  - userId: string
 *  - openLoginErrorDialog: function (heading, content)
 *  - onBackToHome?: optional callback
 */
const LoginWithPassword = ({ userId, openLoginErrorDialog, onBackToHome }) => {
  const [password, setPassword] = useState("");
  const [passwordInvalidMessage, setPasswordInvalidMessage] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // Validate credentials, dispatch token/user/menus and navigate on success.
  // Returns true on success, false on failure.
  const validateUserCredentials = async () => {
    setPasswordInvalidMessage("");
    try {
      console.log("[login] sending request for userId:", userId);
      const response = await axios.post("/LS/auth/login", {
        userId,
        password,
      });

      console.log("[login] response status:", response?.status);
      console.log("[login] response data:", response?.data);

      if (!response) {
        openLoginErrorDialog(
          "Login Failed",
          "Failed to log into FinCore, please try again later"
        );
        return false;
      }

      const result = response.data || {};

      // Successful login
      if (result.validCredentials === true) {
        try {
          const user = parseJwt(result.accessToken);
          const tabId = uuidv4();

          // important: set token first so any axios interceptors or auth checks work
          dispatch(setTabId(tabId));
          dispatch(setToken(result.accessToken));
          dispatch(setUser(user));

          // set menus & selected menu item from roleData
          const menus = result.roleData?.root_menus || [];
          dispatch(setMenus(menus));
          dispatch(setSelectedMenuItem(menus?.[0] ?? null));

          // broadcast login
          try {
            const bc = new BroadcastChannel("auth");
            setTimeout(() => {
              bc.postMessage({
                type: "USER_LOGGED_IN",
                tabId,
                userId: user.userId,
              });
            }, 1000);
          } catch (e) {
            // BroadcastChannel may not be present in all envs
            console.debug("[login] BroadcastChannel not available:", e?.message || e);
          }

          // If server returned a route on roleData, navigate immediately
          const routeToNavigate =
            menus?.[0]?.route ?? result.roleData?.root_menus?.[0]?.route ?? null;

          if (routeToNavigate) {
            console.log("[login] navigating to:", routeToNavigate);
            navigate(routeToNavigate);
          } else {
            console.log("[login] no route found in roleData; staying on current page");
          }

          return true;
        } catch (innerErr) {
          console.error("[login] error processing success response:", innerErr);
          openLoginErrorDialog(
            "Login Error",
            "An error occurred while processing login. Please try again."
          );
          return false;
        }
      }

      // invalid credentials cases / account locked
      if (result.userStatus === "ACTIVE" && result.loginMethod === "p") {
        if (typeof result.attemptsLeft === "number" && result.attemptsLeft > 0) {
          setPasswordInvalidMessage(
            `Invalid password. You have ${result.attemptsLeft} attempts left.`
          );
        } else {
          openLoginErrorDialog(
            "Account Locked",
            "You are out of attempts and your account has been locked."
          );
        }
        return false;
      }

      // generic other statuses
      openLoginErrorDialog(
        loginDialogHeaders[result.userStatus] || "Login Error",
        loginDialogMessages[result.userStatus] || "Something went wrong"
      );
      return false;
    } catch (err) {
      console.error("[login] request failed:", err);
      // If axios returned a response with status (e.g., 401), show message
      if (err?.response?.data?.message) {
        openLoginErrorDialog("Login Failed", err.response.data.message);
      } else {
        openLoginErrorDialog(
          "Login Failed",
          "Failed to log into FinCore, please try again later"
        );
      }
      return false;
    }
  };

  // Button click handler: await validate and optionally do extra flow
  const onSignInClick = async () => {
    await validateUserCredentials();
    // validateUserCredentials handles navigation on success
  };

  const toggleShowPassword = () => {
    setShowPassword((s) => !s);
  };

  return (
    <Box>
      <FormTitle>Enter Password</FormTitle>

      <StyledTextField
        fullWidth
        label="Password"
        type={showPassword ? "text" : "password"}
        placeholder="Enter your password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        variant="outlined"
        error={passwordInvalidMessage !== ""}
        margin="normal"
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <LockIcon />
            </InputAdornment>
          ),
          endAdornment: (
            <InputAdornment position="end">
              <IconButton
                aria-label={showPassword ? "Hide password" : "Show password"}
                onClick={toggleShowPassword}
                edge="end"
                size="large"
              >
                {showPassword ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          ),
        }}
      />

      {passwordInvalidMessage && (
        <PasswordErrorText>{passwordInvalidMessage}</PasswordErrorText>
      )}

      <PrimaryButton
        fullWidth
        variant="contained"
        onClick={onSignInClick}
        disabled={!userId}
      >
        Sign In
      </PrimaryButton>
    </Box>
  );
};

export default LoginWithPassword;
